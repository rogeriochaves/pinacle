# Build stage for vibe-kanban
FROM rust:alpine AS vibe-kanban-builder

# Install Node.js and additional build tools
RUN apk add --no-cache \
    nodejs \
    npm \
    git \
    openssl-dev \
    openssl-libs-static \
    pkgconfig \
    musl-dev \
    sqlite-dev \
    bash

# Install pnpm and Rust development tools
RUN npm install -g pnpm
RUN cargo install sqlx-cli

# Clone and build vibe-kanban
WORKDIR /build
RUN git clone https://github.com/BloopAI/vibe-kanban.git .
RUN pnpm install
RUN apk add perl
RUN apk add build-base
RUN apk add zip
RUN GITHUB_CLIENT_ID=Iv23li8mWSwG4NGXTA3y ./local-build.sh


# Build stage for code-server
FROM node:22-alpine AS code-server-builder

RUN apk update && \
    apk upgrade
RUN apk add bash git alpine-sdk quilt krb5-dev libx11-dev \
      libxkbfile-dev libstdc++ libc6-compat libsecret-dev jq rsync
RUN git clone --branch v4.104.2 --recurse-submodules --shallow-submodules   \
      --depth 1 https://github.com/coder/code-server.git  \
      /code-server

RUN cd /code-server && quilt push -a
RUN cd /code-server && npm install
RUN cd /code-server && npm run build
RUN cd /code-server && VERSION='0.0.0' npm run build:vscode
RUN cd /code-server && npm run release
RUN cd /code-server && npm run release:standalone
RUN rm -rf lib node_modules release test


# Runtime stage
FROM node:22-alpine

# Install base development tools and runtime dependencies
RUN apk add --no-cache \
    curl \
    wget \
    git \
    vim \
    htop \
    python3 \
    py3-pip \
    ca-certificates \
    bash \
    shadow \
    sudo \
    openssh-client \
    tar \
    gzip \
    ttyd \
    tmux

# Install pnpm and essential Node.js tools
RUN npm install -g pnpm

# Copy code-server binaries from builder stage
COPY --from=code-server-builder /code-server/release-standalone /usr/local/code-server
RUN ln -s /usr/local/code-server/bin/code-server /usr/local/bin/code-server

# Copy vibe-kanban binaries from builder stage
COPY --from=vibe-kanban-builder /build/target/release/server /usr/local/bin/vibe-kanban

# Create a non-root user for development
RUN adduser -D -s /bin/bash developer && \
    echo 'developer ALL=(ALL) NOPASSWD:ALL' >> /etc/sudoers

# Create workspace directory
RUN mkdir -p /workspace && chown developer:developer /workspace

# Switch to developer user
USER developer
WORKDIR /workspace

# Set tmux config
RUN tmux set -g status off

# Expose common ports
EXPOSE 8080 3000 8000 8888

CMD ["bash"]
